% CO - process1 - Datapath Design
% 涂珂 2011011273\
傅左右 2011011264\
计14 - 402组
% \today

# 指令集任务

## THCO MIPS 基本指令集

序号	指令	    序号		指令
---	-------	----	-------
1	ADDIU 	 14		LW_SP
2	ADDIU3	 15		MFIH
3	ADDSP	 16		MFPC
4	ADDU	 17		MTIH
5	AND	     18		MTSP
6	B	     19		NOP
7	BEQZ	 20		OR
8	BNEZ	 21		SLL
9	BTEQZ	 22		SRA
10	CMP	     23		SUBU
11	JR	     24		SW
12	LI	     25		SW_SP
13	LW		


## 扩展指令集(402)

 - JRRA
 - SLTI
 - ADDSP3
 - NOT
 - SLT


# 设计方案

------------------

![一个简单、初步的数据通路设计图](datapath.jpg)

------------------

![今天半夜写的一个稍稍更复杂的数据通路设计图> <](datapath-complex.png)

## 方案选择

由指令的功能和计算机硬件结构可将指令的执行分为5个步骤。（IF、ID、EXE、MEM、WB）

虽然流水线结构和设计略复杂，但是流水线效率更高，也已经是当前CPU中被普遍使用的方案。所以我们选择用流水线的方案来实现CPU。（在上图中暂时还没有加入对冲突的处理）

根据4个流水线寄存器（图中最大的矩形）将流水线分为5个部分：

1.	IF：取指令、形成下条指令的地址
2.	ID: 指令译码，读寄存器堆（准备数据）
3.	EXE: 指令执行，地址计算
4.	MEM： 数据内存访问（存储器读写）
5.	WB： 写回

指令和数据随执行过程从左到右依次从五个过程走过。每个时钟周期5个部分并行处理不同指令的对应部分。

## 每条指令对数据通路的操作

1. IF 取指令，PC从内存中取指令，并将数据放入IF/ID寄存器。将PC中地址+4取下一条指令，但也可能会有跳转指令，所以有一个数据选择器选择。
2. ID指令译码，其将数据存入2个读寄存器（可能只用一个，由指令决定）， 有的指令有立即数的输入，这里提供了一个符号扩展单元。将扩展后的数以及2个寄存器中数据，还有增加后的PC值写入ID/EX寄存器。
3. EX 将立即数左移两位进行加法运算，根据指令类型进行不同的ALU运算，结果放入EX/MEM寄存器。
4. MEM 根据得到的结果读取数据内存。写入MEM/WB寄存器。
5. WB 将得到的写入寄存器堆中。

## 需要解决的问题

 - 数据通路
 - 控制信号
 - 执行时序


# 方案细节

## CPU设计

主要部件

 - ALU

功能

 - 数据运算：算术、逻辑、移位
 - 数据移动
 - 流程控制：转移、调用/返回、中断

分工

 - Datapath：数据移动和计算
 - Controller：控制整个过程


## 指令设计

 - 用前5位表示op。共30条。
 - 加*为扩展指令。
 - XXX，YYY，ZZZ为寄存器标号。
 - III为立即数。
 - 把类型相近的op连续起来，这样写代码就可以用大于小于判断了。

## R型指令

R		指令结构
----	----------------
MFIH	00001XXX00000000
MFPC	00010XXX00000000
MTIH	00011XXX00000000
MTSP	00100XXX00000000
AND		00101XXXYYY00000
OR		00110XXXYYY00000
*NOT	00111XXXYYY00000
*SLT	01000XXXYYY00000
CMP		01001XXXYYY00000
SLL		01010XXXYYYIII00
SRA		01011XXXYYYIII00
ADDU	01100XXXYYYZZZ00
SUBU	01101XXXYYYZZZ00


## I型指令

I		指令结构
-----	----------------
ADDSP	01110IIIIIIII000
LW_SP	01111XXX00000000
ADDIU	10000XXXIIIIIIII
*SLTI	10001XXXIIIIIIII
*ADDSP3	10010XXXIIIIIIII
LI		10011XXXIIIIIIII
ADDIU3	10100XXXYYY0IIII
LW		10101XXXYYYIIIII
SW		10110XXXYYYIIIII
SW_SP	10111XXXYYYIIIII

## B型指令

B		指令结构
-----	----------------
B		11000IIIIIIIIIII
BTEQZ	11001IIIIIIII000
BEQZ	11010XXXIIIIIIII
BNEZ	11011XXXIIIIIIII

## J, R型指令

**J型指令**

J		指令结构
-----	----------------
*JRRA	1110000000000000
JR		11101XXX00000000

**NOP指令**

-----	----------------
NOP		0000000000000000
-----	----------------

## 控制信号设计

---------------------------------------------------------------------
信号名称		设0事件				设1事件					作用阶段
---------	------------------	---------------------	-------------
Reg-Write	无					将数据写入到寄存器		ID
								输出对应的寄存器ID		

ALU-Src		第二个ALU操作数来自	第二个ALU操作数符号		EXE
			寄存器堆的第二个输出	扩展后的立即数

PC-Src		PC += 4				PC为分支计算器的输出		IF

Mem-Read	无					输入地址对应数据的		MEM
								内存放到数据输出


Mem-Write	无					输入地址对应数据内存		MEM
								放到数据的输入

Mem-Reg		ALU提供寄存器		数据内存提供寄存器		WB
			写的输入值			写数据的输入值
---------------------------------------------------------------------

Table: Control Signal Table

## 最后回过头来再看看…

![一个稍稍更复杂的数据通路设计图> <](datapath-complex.png)


------------------

The End. Thank you :P!

